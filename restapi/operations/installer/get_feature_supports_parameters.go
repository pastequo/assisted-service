// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetFeatureSupportsParams creates a new GetFeatureSupportsParams object
// with the default values initialized.
func NewGetFeatureSupportsParams() GetFeatureSupportsParams {

	var (
		// initialize parameters with default values

		cPUArchitectureDefault = string("x86_64")
	)

	return GetFeatureSupportsParams{
		CPUArchitecture: &cPUArchitectureDefault,
	}
}

// GetFeatureSupportsParams contains all the bound params for the get feature supports operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetFeatureSupports
type GetFeatureSupportsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The CPU architecture of the image (x86_64/arm64/etc).
	  In: query
	  Default: "x86_64"
	*/
	CPUArchitecture *string
	/*List of feature that is required.
	  In: query
	*/
	FeatureIds []string
	/*Version of the OpenShift cluster.
	  Required: true
	  In: query
	*/
	OpenshiftVersion string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetFeatureSupportsParams() beforehand.
func (o *GetFeatureSupportsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCPUArchitecture, qhkCPUArchitecture, _ := qs.GetOK("cpu_architecture")
	if err := o.bindCPUArchitecture(qCPUArchitecture, qhkCPUArchitecture, route.Formats); err != nil {
		res = append(res, err)
	}

	qFeatureIds, qhkFeatureIds, _ := qs.GetOK("feature_ids")
	if err := o.bindFeatureIds(qFeatureIds, qhkFeatureIds, route.Formats); err != nil {
		res = append(res, err)
	}

	qOpenshiftVersion, qhkOpenshiftVersion, _ := qs.GetOK("openshift_version")
	if err := o.bindOpenshiftVersion(qOpenshiftVersion, qhkOpenshiftVersion, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCPUArchitecture binds and validates parameter CPUArchitecture from query.
func (o *GetFeatureSupportsParams) bindCPUArchitecture(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetFeatureSupportsParams()
		return nil
	}
	o.CPUArchitecture = &raw

	if err := o.validateCPUArchitecture(formats); err != nil {
		return err
	}

	return nil
}

// validateCPUArchitecture carries on validations for parameter CPUArchitecture
func (o *GetFeatureSupportsParams) validateCPUArchitecture(formats strfmt.Registry) error {

	if err := validate.EnumCase("cpu_architecture", "query", *o.CPUArchitecture, []interface{}{"x86_64", "aarch64", "arm64", "ppc64le", "s390x", "multi"}, true); err != nil {
		return err
	}

	return nil
}

// bindFeatureIds binds and validates array parameter FeatureIds from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetFeatureSupportsParams) bindFeatureIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvFeatureIds string
	if len(rawData) > 0 {
		qvFeatureIds = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	featureIdsIC := swag.SplitByFormat(qvFeatureIds, "")
	if len(featureIdsIC) == 0 {
		return nil
	}

	var featureIdsIR []string
	for _, featureIdsIV := range featureIdsIC {
		featureIdsI := featureIdsIV

		featureIdsIR = append(featureIdsIR, featureIdsI)
	}

	o.FeatureIds = featureIdsIR

	return nil
}

// bindOpenshiftVersion binds and validates parameter OpenshiftVersion from query.
func (o *GetFeatureSupportsParams) bindOpenshiftVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("openshift_version", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("openshift_version", "query", raw); err != nil {
		return err
	}
	o.OpenshiftVersion = raw

	return nil
}
