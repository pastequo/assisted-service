// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openshift/assisted-service/models"
)

// GetFeatureSupportsReader is a Reader for the GetFeatureSupports structure.
type GetFeatureSupportsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFeatureSupportsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFeatureSupportsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFeatureSupportsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFeatureSupportsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFeatureSupportsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFeatureSupportsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetFeatureSupportsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetFeatureSupportsOK creates a GetFeatureSupportsOK with default headers values
func NewGetFeatureSupportsOK() *GetFeatureSupportsOK {
	return &GetFeatureSupportsOK{}
}

/*
GetFeatureSupportsOK describes a response with status code 200, with default header values.

Success.
*/
type GetFeatureSupportsOK struct {
	Payload models.FeatureSupports
}

// IsSuccess returns true when this get feature supports o k response has a 2xx status code
func (o *GetFeatureSupportsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get feature supports o k response has a 3xx status code
func (o *GetFeatureSupportsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature supports o k response has a 4xx status code
func (o *GetFeatureSupportsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get feature supports o k response has a 5xx status code
func (o *GetFeatureSupportsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature supports o k response a status code equal to that given
func (o *GetFeatureSupportsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetFeatureSupportsOK) Error() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsOK  %+v", 200, o.Payload)
}

func (o *GetFeatureSupportsOK) String() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsOK  %+v", 200, o.Payload)
}

func (o *GetFeatureSupportsOK) GetPayload() models.FeatureSupports {
	return o.Payload
}

func (o *GetFeatureSupportsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSupportsBadRequest creates a GetFeatureSupportsBadRequest with default headers values
func NewGetFeatureSupportsBadRequest() *GetFeatureSupportsBadRequest {
	return &GetFeatureSupportsBadRequest{}
}

/*
GetFeatureSupportsBadRequest describes a response with status code 400, with default header values.

Error.
*/
type GetFeatureSupportsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get feature supports bad request response has a 2xx status code
func (o *GetFeatureSupportsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature supports bad request response has a 3xx status code
func (o *GetFeatureSupportsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature supports bad request response has a 4xx status code
func (o *GetFeatureSupportsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature supports bad request response has a 5xx status code
func (o *GetFeatureSupportsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature supports bad request response a status code equal to that given
func (o *GetFeatureSupportsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetFeatureSupportsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsBadRequest  %+v", 400, o.Payload)
}

func (o *GetFeatureSupportsBadRequest) String() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsBadRequest  %+v", 400, o.Payload)
}

func (o *GetFeatureSupportsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetFeatureSupportsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSupportsUnauthorized creates a GetFeatureSupportsUnauthorized with default headers values
func NewGetFeatureSupportsUnauthorized() *GetFeatureSupportsUnauthorized {
	return &GetFeatureSupportsUnauthorized{}
}

/*
GetFeatureSupportsUnauthorized describes a response with status code 401, with default header values.

Unauthorized.
*/
type GetFeatureSupportsUnauthorized struct {
	Payload *models.InfraError
}

// IsSuccess returns true when this get feature supports unauthorized response has a 2xx status code
func (o *GetFeatureSupportsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature supports unauthorized response has a 3xx status code
func (o *GetFeatureSupportsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature supports unauthorized response has a 4xx status code
func (o *GetFeatureSupportsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature supports unauthorized response has a 5xx status code
func (o *GetFeatureSupportsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature supports unauthorized response a status code equal to that given
func (o *GetFeatureSupportsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetFeatureSupportsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFeatureSupportsUnauthorized) String() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFeatureSupportsUnauthorized) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *GetFeatureSupportsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSupportsForbidden creates a GetFeatureSupportsForbidden with default headers values
func NewGetFeatureSupportsForbidden() *GetFeatureSupportsForbidden {
	return &GetFeatureSupportsForbidden{}
}

/*
GetFeatureSupportsForbidden describes a response with status code 403, with default header values.

Forbidden.
*/
type GetFeatureSupportsForbidden struct {
	Payload *models.InfraError
}

// IsSuccess returns true when this get feature supports forbidden response has a 2xx status code
func (o *GetFeatureSupportsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature supports forbidden response has a 3xx status code
func (o *GetFeatureSupportsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature supports forbidden response has a 4xx status code
func (o *GetFeatureSupportsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature supports forbidden response has a 5xx status code
func (o *GetFeatureSupportsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature supports forbidden response a status code equal to that given
func (o *GetFeatureSupportsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetFeatureSupportsForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsForbidden  %+v", 403, o.Payload)
}

func (o *GetFeatureSupportsForbidden) String() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsForbidden  %+v", 403, o.Payload)
}

func (o *GetFeatureSupportsForbidden) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *GetFeatureSupportsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSupportsNotFound creates a GetFeatureSupportsNotFound with default headers values
func NewGetFeatureSupportsNotFound() *GetFeatureSupportsNotFound {
	return &GetFeatureSupportsNotFound{}
}

/*
GetFeatureSupportsNotFound describes a response with status code 404, with default header values.

Error.
*/
type GetFeatureSupportsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get feature supports not found response has a 2xx status code
func (o *GetFeatureSupportsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature supports not found response has a 3xx status code
func (o *GetFeatureSupportsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature supports not found response has a 4xx status code
func (o *GetFeatureSupportsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature supports not found response has a 5xx status code
func (o *GetFeatureSupportsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature supports not found response a status code equal to that given
func (o *GetFeatureSupportsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetFeatureSupportsNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsNotFound  %+v", 404, o.Payload)
}

func (o *GetFeatureSupportsNotFound) String() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsNotFound  %+v", 404, o.Payload)
}

func (o *GetFeatureSupportsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetFeatureSupportsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSupportsServiceUnavailable creates a GetFeatureSupportsServiceUnavailable with default headers values
func NewGetFeatureSupportsServiceUnavailable() *GetFeatureSupportsServiceUnavailable {
	return &GetFeatureSupportsServiceUnavailable{}
}

/*
GetFeatureSupportsServiceUnavailable describes a response with status code 503, with default header values.

Unavailable.
*/
type GetFeatureSupportsServiceUnavailable struct {
	Payload *models.Error
}

// IsSuccess returns true when this get feature supports service unavailable response has a 2xx status code
func (o *GetFeatureSupportsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature supports service unavailable response has a 3xx status code
func (o *GetFeatureSupportsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature supports service unavailable response has a 4xx status code
func (o *GetFeatureSupportsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get feature supports service unavailable response has a 5xx status code
func (o *GetFeatureSupportsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get feature supports service unavailable response a status code equal to that given
func (o *GetFeatureSupportsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetFeatureSupportsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFeatureSupportsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /v2/support-levels/feature-supports][%d] getFeatureSupportsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFeatureSupportsServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetFeatureSupportsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
