// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeatureSupport feature support
//
// swagger:model feature-support
type FeatureSupport struct {

	// feature support level id
	// Required: true
	FeatureSupportLevelID *FeatureSupportLevelID `json:"feature-support-level-id"`

	// Feature name.
	// Required: true
	Name *string `json:"name"`

	// reason
	Reason *FeatureSupportReason `json:"reason,omitempty"`

	// support level
	// Required: true
	SupportLevel *SupportLevel `json:"support-level"`
}

// Validate validates this feature support
func (m *FeatureSupport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatureSupportLevelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureSupport) validateFeatureSupportLevelID(formats strfmt.Registry) error {

	if err := validate.Required("feature-support-level-id", "body", m.FeatureSupportLevelID); err != nil {
		return err
	}

	if err := validate.Required("feature-support-level-id", "body", m.FeatureSupportLevelID); err != nil {
		return err
	}

	if m.FeatureSupportLevelID != nil {
		if err := m.FeatureSupportLevelID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feature-support-level-id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("feature-support-level-id")
			}
			return err
		}
	}

	return nil
}

func (m *FeatureSupport) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FeatureSupport) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *FeatureSupport) validateSupportLevel(formats strfmt.Registry) error {

	if err := validate.Required("support-level", "body", m.SupportLevel); err != nil {
		return err
	}

	if err := validate.Required("support-level", "body", m.SupportLevel); err != nil {
		return err
	}

	if m.SupportLevel != nil {
		if err := m.SupportLevel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("support-level")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("support-level")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this feature support based on the context it is used
func (m *FeatureSupport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeatureSupportLevelID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupportLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureSupport) contextValidateFeatureSupportLevelID(ctx context.Context, formats strfmt.Registry) error {

	if m.FeatureSupportLevelID != nil {
		if err := m.FeatureSupportLevelID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feature-support-level-id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("feature-support-level-id")
			}
			return err
		}
	}

	return nil
}

func (m *FeatureSupport) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if m.Reason != nil {
		if err := m.Reason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *FeatureSupport) contextValidateSupportLevel(ctx context.Context, formats strfmt.Registry) error {

	if m.SupportLevel != nil {
		if err := m.SupportLevel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("support-level")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("support-level")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeatureSupport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeatureSupport) UnmarshalBinary(b []byte) error {
	var res FeatureSupport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FeatureSupportReason Reason why the support level is not supported or unavailable.
//
// swagger:model FeatureSupportReason
type FeatureSupportReason struct {

	// List of incompatible feature IDs.
	IncompatibleFeatureIDs []FeatureSupportLevelID `json:"incompatibleFeatureIDs"`

	// Indicates whether the feature is compatible or not with the CPU architecture.
	InvalidCPUArchitecture bool `json:"invalidCPUArchitecture,omitempty"`
}

// Validate validates this feature support reason
func (m *FeatureSupportReason) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIncompatibleFeatureIDs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureSupportReason) validateIncompatibleFeatureIDs(formats strfmt.Registry) error {
	if swag.IsZero(m.IncompatibleFeatureIDs) { // not required
		return nil
	}

	for i := 0; i < len(m.IncompatibleFeatureIDs); i++ {

		if err := m.IncompatibleFeatureIDs[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason" + "." + "incompatibleFeatureIDs" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason" + "." + "incompatibleFeatureIDs" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this feature support reason based on the context it is used
func (m *FeatureSupportReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIncompatibleFeatureIDs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureSupportReason) contextValidateIncompatibleFeatureIDs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncompatibleFeatureIDs); i++ {

		if err := m.IncompatibleFeatureIDs[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason" + "." + "incompatibleFeatureIDs" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason" + "." + "incompatibleFeatureIDs" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeatureSupportReason) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeatureSupportReason) UnmarshalBinary(b []byte) error {
	var res FeatureSupportReason
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
